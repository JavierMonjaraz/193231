#Postgres
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-vol
spec:
  storageClassName: sc-postgres
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/postgres-vol1"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-postgres
spec:
  storageClassName: sc-postgres
  accessModes:
    - ReadWriteOnce
  resources: 
    requests:
      storage: 5Gi

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-postgres
provisioner: kubernetes.io/no-provisioner 
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-postgres
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: pod
  POSTGRES_PASSWORD: podKube

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deploy
  namespace: 193231-namespace
  labels:
    app: postgres-server
spec:
  selector:
    matchLabels:
      app: postgres-server
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-server
    spec:
      containers:
      - image: postgres:11
        name: postgres-db1
        ports:
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db-volume1
        envFrom:
        - configMapRef:
            name: env-postgres
      volumes:
      - name: postgres-db-volume1
        persistentVolumeClaim:
           claimName: pvc-postgres

---
apiVersion: v1
kind: Service
metadata:
  name: s-postgres
spec:
  selector:
    app: postgres-server
  ports:
    - protocol: TCP
      port: 5300
      targetPort: 5432
  type: LoadBalancer

#REDIS
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-vol
spec:
  storageClassName: sc-redis
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/redis-vol1"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-redis
spec:
  storageClassName: sc-redis
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-redis
provisioner: kubernetes.io/no-provisioner 
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deploy
  namespace: 193231-namespace
  labels:
    app: redis-server
spec:
  selector:
    matchLabels:
      app: redis-server
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-server
    spec:
      containers:
      - image: redis
        name: redis-db1
        ports:
        - containerPort: 6379
          protocol: TCP
        volumeMounts:
        - mountPath: /data/redis
          name: redis-db-volume1
      volumes:
      - name: redis-db-volume1
        persistentVolumeClaim:
           claimName: pvc-redis

---
apiVersion: v1
kind: Service
metadata:
  name: s-redis
spec:
  selector:
    app: redis-server
  ports:
    - protocol: TCP
      port: 5301
      targetPort: 6379
  type: LoadBalancer

#MONGO
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-vol
spec:
  storageClassName: sc-mongo
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mongo-vol1"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mongo
spec:
  storageClassName: sc-mongo
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-mongo
provisioner: kubernetes.io/no-provisioner 
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-mongo
data:
  MONGO_INITDB_ROOT_USERNAME: podMongo
  MONGO_INITDB_ROOT_PASSWORD: podKube
  MONGO_INITDB_DATABASE: mongodb

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: 193231-namespace
  labels:
    app: mongodb-server
spec:
  selector:
    matchLabels:
      app: mongodb-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb-server
    spec:
      containers:
      - image: mongo  
        name: mongo-db1
        ports:
        - containerPort: 27017
          protocol: TCP
        volumeMounts:
        - mountPath: /data/db
          name: mongo-db-volume1
        envFrom:
        - configMapRef:
            name: env-mongo
      volumes:
      - name: mongo-db-volume1
        persistentVolumeClaim:
           claimName: pvc-mongo

---
apiVersion: v1
kind: Service
metadata:
  name: s-mongodb
spec:
  selector:
    app: mongodb-server
  ports:
    - protocol: TCP
      port: 5302
      targetPort: 27017
  type: LoadBalancer

#MYSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-vol
spec:
  storageClassName: sc-mysql
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mysql-vol1"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mysql
spec:
  storageClassName: sc-mysql
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-mysql
provisioner: kubernetes.io/no-provisioner 
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-mysql
data:
  MYSQL_DATABASE: mysql
  MYSQL_USER: pod
  MYSQL_PASSWORD: podKube
  MYSQL_ROOT_PASSWORD: Prueba123

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: 193231-namespace
  labels:
    app: mysql-server
spec:
  selector:
    matchLabels:
      app: mysql-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-server
    spec:
      containers:
      - image: mysql 
        name: mysql-db1
        ports:
        - containerPort: 3306
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-db-volume1
        envFrom:
        - configMapRef:
            name: env-mysql
      volumes:
      - name: mysql-db-volume1
        persistentVolumeClaim:
           claimName: pvc-mysql

---
apiVersion: v1
kind: Service
metadata:
  name: s-mysql
spec:
  selector:
    app: mysql-server
  ports:
    - protocol: TCP
      port: 5303
      targetPort: 3306
  type: LoadBalancer